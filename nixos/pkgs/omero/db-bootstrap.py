#!/usr/bin/env python

"""
OMERO database bootstrap script.

This script creates and populates an OMERO database, avoiding to store
input passwords on disk, even temporarily. In fact, database scripts
get generated by a pipeline whose sink is Postges itself.

This script does nothing if the specified OMERO database already exists.

Assumptions
-----------
1. Postgres `psql` command is in the PATH.
2. Ditto for `omero`. (All you need to do is unzip the OMERO server bundle
and add its `bin` directory to the PATH.)
3. The user you run this script with or the one you specify through this
script's command line switch must be able to log into Postgres without
being prompted for a password and connect to the `postgres` database.
Moreover, said user must have enough privileges to create databases and
roles as well as setting the session's user---i.e. executing `SET ROLE`.
"""

from argparse import ArgumentParser, ArgumentTypeError
import itertools
from subprocess import Popen, PIPE, check_output, CalledProcessError
from string import Template
import sys


class Args:
    """Command line arguments parser."""

    def _non_empty_string(self, x):
        if x is None or x.strip() == '':
            raise ArgumentTypeError("must not be empty or just white space")
        return x;

    def _build_parser(self):
        p = ArgumentParser(description='OMERO database bootstrap script.')
        ne = self._non_empty_string

        p.add_argument('--db-name', type=ne, required=True,
                       help='OMERO database name')
        p.add_argument('--db-user', type=ne, required=True,
                       help='OMERO database role name')
        p.add_argument('--db-pass', type=ne, required=True,
                       help='OMERO database role password')
        p.add_argument('--server-pass', type=ne, required=True,
                       help='Password for the OMERO root user (experimenter)')

        p.add_argument('--pg-host', type=ne, required=False,
                       help='Hostname of the Postgres server')
        p.add_argument('--pg-port', type=int, required=False,
                       help='Port number of the Postgres server')
        p.add_argument('--pg-username', type=ne, required=False,
                       help='Username to use to connect to the Postgres server')

        return p

    def __init__(self):
        self._parser = self._build_parser()

    def get(self):
        """Return the parsed command line arguments if the parser succeeds,
        raise an exception otherwise.
        """
        return self._parser.parse_args()


class PgSql:
    """PgSql utilities."""

    @staticmethod
    def escape_single_quote(x):
        """Single quote escaping for Postres strings: replace any single quote
        with two single quotes. E.g. x'y'z ~~~> x''y''z
        """
        return x.replace("'", "''")

    @staticmethod
    def escape_double_quote(x):
        """Double quote escaping for Postres quoted identifiers: replace any
        double quote with two double quotes. E.g. x"y"z ~~~> x""y""z
        """
        return x.replace('"', '""')

    @staticmethod
    def to_string(x):
        """Convert the input into a Postgres string, escaping if needed.
        E.g. input   ~~~> 'input'
             in'put  ~~~> 'in''put'
        """
        escaped = PgSql.escape_single_quote(str(x))
        return "'{0}'".format(escaped)

    @staticmethod
    def to_quoted_identifier(x):
        """Convert the input into a Postgres quoted identifier, escaping if
        needed.
        E.g. input   ~~~> "input"
             in"put  ~~~> "in""put"
        """
        escaped = PgSql.escape_double_quote(str(x))
        return '"{0}"'.format(escaped)


class CreateDb:
    """Template SQL to create OMERO database and role."""

    _sql_template = Template('''
CREATE ROLE ${db_user}
       LOGIN PASSWORD ${db_pass};

CREATE DATABASE ${db_name}
       OWNER ${db_user}
       ENCODING 'UTF8';

\connect ${db_name}

SET ROLE ${db_user};
''')

    @staticmethod
    def sql(db_name, db_user, db_pass):
        """Produce the SLQ that creates the OMERO database and role and then
        connects to the newly created database with that role.
        """
        return CreateDb._sql_template.substitute(
            db_name = PgSql.to_quoted_identifier(db_name),
            db_user = PgSql.to_quoted_identifier(db_user),
            db_pass = PgSql.to_string(db_pass)
        )

class DbExist:
    """Template SQL to check if a database exists."""

    _sql_template = Template('''
SELECT 1 FROM pg_database WHERE datname = ${db_name};
''')

    @staticmethod
    def sql(db_name):
        """Produce the SLQ to check if a database exists."""
        return DbExist._sql_template.substitute(
            db_name = PgSql.to_string(db_name))

class Psql:
    """Uses the psql command to execute SQL statements."""

    def _to_argv(self, dbname, hostname, port, username):
        # see psql man page for details
        xs = [('-d', dbname), ('-h', hostname), ('-p', port), ('-U', username)]
        ys = list(itertools.chain(*[
            [x[0], x[1]] for x in xs if x[1] != None
        ])) # Python's way to do: concatMap m . filter f ? oh well...
        return ys + [
            '-w', # no password prompt
            '-t', # output tuples only
            '-q', # quiet
        ]

    def __init__(self, dbname=None, hostname=None, port=None, username=None):
        """Create a new instance to execute SQL statements.
        Input parameters determine how to connect to the Postgres server.
        """
        self._cmd = ['psql'] + self._to_argv(dbname, hostname, port, username)

    def _check_outcome(self, status, out, err):
        if status != 0:
            sys.stderr.write(err)
            raise CalledProcessError(cmd=self._cmd, returncode=status)
        return out

    def run_sql(self, sql):
        """Run the given SQL statements."""
        psql = Popen(self._cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)
        out, err = psql.communicate(input=sql)
        return self._check_outcome(psql.returncode, out, err)

    def db_exists(self, db_name):
        """Check if there's a database having the specified name."""
        query = DbExist.sql(db_name)
        out = self.run_sql(query)
        return out.find("1") != -1


class OmeroDbScript:
    """Produces the SQL to create and populate the OMERO database."""

    def __init__(self, args):
        self._args = args;
        self._cmd = ['omero', 'db', 'script',
                     '--password', args.server_pass,
                     '--file', '-']

    def generate_sql(self):
        """Produce the SQL to create and populate the OMERO database."""
        create_db = CreateDb.sql(self._args.db_name,
                                 self._args.db_user,
                                 self._args.db_pass)
        populate_db = check_output(self._cmd, stderr=sys.stderr)
        return create_db + populate_db
# NB the OMERO db script is reasonably small so we suck it into memory to
# simplify things, but going forward we should use a proper pipeline!

class DbBootstrap:
    """Provides the functionality to create and populate the OMERO database."""

    def __init__(self):
        self._args = Args().get()

    def _psql(self, db_name='postgres'):
        return Psql(dbname   = db_name,
                    hostname = self._args.pg_host,
                    port     = self._args.pg_port,
                    username = self._args.pg_username)

    def _should_run(self):
        omerodb = self._args.db_name;
        return not self._psql().db_exists(omerodb)

    def run(self):
        """Create and populate the OMERO database if it doesn't exist,
        do nothing otherwise.
        """
        if self._should_run():
            script = OmeroDbScript(self._args).generate_sql()
            self._psql().run_sql(script)
            # NB replace w/ proper pipeline, see note above.


if __name__ == "__main__":
    status = 0
    try:
        DbBootstrap().run()
    except CalledProcessError as cpe:
        # Rewrite error message to avoid leaking passwords into log files.
        msg = 'Command `{0}` returned non-zero exit status of: {1}'.format(
            cpe.cmd[0], cpe.returncode)
        sys.stderr.write(msg)
        if cpe.output != None:
            sys.stderr.write(str(cpe.output))
        status = 64
    except Exception as e:
        sys.stderr.write(str(e))
        status = 65
    except:
        xe = sys.exc_info()[0]
        sys.stderr.write(str(xe))
        status = 66

    sys.exit(status)
